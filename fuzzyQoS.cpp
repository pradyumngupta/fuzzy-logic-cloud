//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani 
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------

#include <stdio.h>
#include <fstream>
#include<bits/stdc++.h>
#include <stdlib.h>
using namespace std;
double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate)	{ return ( defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate ); }

double ruleActivationMethod_min(double degreeOfSupport, double membership)	{ return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2)	{ return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_vmType {

	public: 
	// VAR_INPUT
	double bandWidth;
	double processingPower;

	// VAR_OUTPUT
	double vmType;

	private: 
	// FUZZIFY bandWidth
	double bandWidth_High;
	double bandWidth_low;
	double bandWidth_medium;

	// FUZZIFY processingPower
	double processingPower_High;
	double processingPower_low;
	double processingPower_medium;
	double processingPower_veryLow;


	// DEFUZZIFY vmType
	double defuzzify_vmType[1000];


	public:
	FunctionBlock_vmType();
	void calc();
	void print();

	private:
	void defuzzify();
	void fuzzify();
	void reset();
	double membership_bandWidth_High(double x);
	double membership_bandWidth_low(double x);
	double membership_bandWidth_medium(double x);
	double membership_processingPower_High(double x);
	double membership_processingPower_low(double x);
	double membership_processingPower_medium(double x);
	double membership_processingPower_veryLow(double x);
	double membership_vmType_Type0(double x);
	double membership_vmType_Type1(double x);
	double membership_vmType_Type2(double x);
	double membership_vmType_Type3(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_vmType::FunctionBlock_vmType() {
	vmType = 0.0;
}

// Calculate function block
void FunctionBlock_vmType::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_vmType::calc_No1() {
	// RULE 1 : IF (processingPower IS veryLow) AND (bandWidth IS low) THEN vmType IS Type0;
	double degreeOfSupport_1 = 1.0 * ( ruleConnectionMethod_and(processingPower_veryLow , bandWidth_low) );
	if( degreeOfSupport_1 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type0(x);
			double y = ruleActivationMethod_min( degreeOfSupport_1 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 2 : IF (processingPower IS veryLow) AND (bandWidth IS medium) THEN vmType IS Type0;
	double degreeOfSupport_2 = 1.0 * ( ruleConnectionMethod_and(processingPower_veryLow , bandWidth_medium) );
	if( degreeOfSupport_2 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type0(x);
			double y = ruleActivationMethod_min( degreeOfSupport_2 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 3 : IF (processingPower IS veryLow) AND (bandWidth IS High) THEN vmType IS Type1;
	double degreeOfSupport_3 = 1.0 * ( ruleConnectionMethod_and(processingPower_veryLow , bandWidth_High) );
	if( degreeOfSupport_3 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type1(x);
			double y = ruleActivationMethod_min( degreeOfSupport_3 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 4 : IF (processingPower IS low) AND (bandWidth IS low) THEN vmType IS Type1;
	double degreeOfSupport_4 = 1.0 * ( ruleConnectionMethod_and(processingPower_low , bandWidth_low) );
	if( degreeOfSupport_4 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type1(x);
			double y = ruleActivationMethod_min( degreeOfSupport_4 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 5 : IF (processingPower IS low) AND (bandWidth IS medium) THEN vmType IS Type2;
	double degreeOfSupport_5 = 1.0 * ( ruleConnectionMethod_and(processingPower_low , bandWidth_medium) );
	if( degreeOfSupport_5 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type2(x);
			double y = ruleActivationMethod_min( degreeOfSupport_5 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 6 : IF (processingPower IS low) AND (bandWidth IS low) THEN vmType IS Type2;
	double degreeOfSupport_6 = 1.0 * ( ruleConnectionMethod_and(processingPower_low , bandWidth_low) );
	if( degreeOfSupport_6 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type2(x);
			double y = ruleActivationMethod_min( degreeOfSupport_6 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 7 : IF (processingPower IS medium) AND (bandWidth IS low) THEN vmType IS Type2;
	double degreeOfSupport_7 = 1.0 * ( ruleConnectionMethod_and(processingPower_medium , bandWidth_low) );
	if( degreeOfSupport_7 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type2(x);
			double y = ruleActivationMethod_min( degreeOfSupport_7 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 8 : IF (processingPower IS medium) AND (bandWidth IS medium) THEN vmType IS Type3;
	double degreeOfSupport_8 = 1.0 * ( ruleConnectionMethod_and(processingPower_medium , bandWidth_medium) );
	if( degreeOfSupport_8 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type3(x);
			double y = ruleActivationMethod_min( degreeOfSupport_8 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 9 : IF (processingPower IS medium) AND (bandWidth IS High) THEN vmType IS Type3;
	double degreeOfSupport_9 = 1.0 * ( ruleConnectionMethod_and(processingPower_medium , bandWidth_High) );
	if( degreeOfSupport_9 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type3(x);
			double y = ruleActivationMethod_min( degreeOfSupport_9 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

	// RULE 10 : IF processingPower IS High THEN vmType IS Type3;
	double degreeOfSupport_10 = 1.0 * ( processingPower_High );
	if( degreeOfSupport_10 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.004;
			double membership = membership_vmType_Type3(x);
			double y = ruleActivationMethod_min( degreeOfSupport_10 , membership );
			defuzzify_vmType[i] += ruleAccumulationMethod_max( defuzzify_vmType[i], y );
		}
	}

}

// Defuzzify 
void FunctionBlock_vmType::defuzzify() {
	double sum_vmType = 0.0;
	double wsum_vmType = 0.0;
	for (int i = 0; i < 1000 ; i++ ) {
		double x = 0.0 + i * 0.004;
		sum_vmType += defuzzify_vmType[i];
		wsum_vmType += x * defuzzify_vmType[i];
	}
	vmType = wsum_vmType / sum_vmType;
}

// Fuzzify all variables
void FunctionBlock_vmType::fuzzify() {
	bandWidth_High = membership_bandWidth_High(bandWidth);
	bandWidth_low = membership_bandWidth_low(bandWidth);
	bandWidth_medium = membership_bandWidth_medium(bandWidth);
	processingPower_High = membership_processingPower_High(processingPower);
	processingPower_low = membership_processingPower_low(processingPower);
	processingPower_medium = membership_processingPower_medium(processingPower);
	processingPower_veryLow = membership_processingPower_veryLow(processingPower);
}

// Membership functions 
double FunctionBlock_vmType::membership_bandWidth_High(double x) {
	if ( x <= 850.0 )	return 0.0;
	if ( x > 2000.0 )	return 1.0;
	if ( x <= 1000.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 850.0 ) / ( 1000.0 - 850.0 ) );
	if ( x <= 2000.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 1000.0 ) / ( 2000.0 - 1000.0 ) );
}

double FunctionBlock_vmType::membership_bandWidth_low(double x) {
	if ( x <= 500.0 )	return 0.0;
	if ( x > 750.0 )	return 0.0;
	if ( x <= 600.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 500.0 ) / ( 600.0 - 500.0 ) );
	if ( x <= 750.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 600.0 ) / ( 750.0 - 600.0 ) );
}

double FunctionBlock_vmType::membership_bandWidth_medium(double x) {
	if ( x <= 650.0 )	return 0.0;
	if ( x > 950.0 )	return 0.0;
	if ( x <= 800.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 650.0 ) / ( 800.0 - 650.0 ) );
	if ( x <= 950.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 800.0 ) / ( 950.0 - 800.0 ) );
}

double FunctionBlock_vmType::membership_processingPower_High(double x) {
	if ( x <= 3750.0 )	return 0.0;
	if ( x > 7500.0 )	return 1.0;
	if ( x <= 4500.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 3750.0 ) / ( 4500.0 - 3750.0 ) );
	if ( x <= 7500.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 4500.0 ) / ( 7500.0 - 4500.0 ) );
}

double FunctionBlock_vmType::membership_processingPower_low(double x) {
	if ( x <= 1250.0 )	return 0.0;
	if ( x > 3200.0 )	return 0.0;
	if ( x <= 2500.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 1250.0 ) / ( 2500.0 - 1250.0 ) );
	if ( x <= 3200.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 2500.0 ) / ( 3200.0 - 2500.0 ) );
}

double FunctionBlock_vmType::membership_processingPower_medium(double x) {
	if ( x <= 2750.0 )	return 0.0;
	if ( x > 4200.0 )	return 0.0;
	if ( x <= 3500.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 2750.0 ) / ( 3500.0 - 2750.0 ) );
	if ( x <= 4200.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 3500.0 ) / ( 4200.0 - 3500.0 ) );
}

double FunctionBlock_vmType::membership_processingPower_veryLow(double x) {
	if ( x <= 0.0 )	return 0.0;
	if ( x > 2000.0 )	return 0.0;
	if ( x <= 1000.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.0 ) / ( 1000.0 - 0.0 ) );
	if ( x <= 2000.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 1000.0 ) / ( 2000.0 - 1000.0 ) );
}

double FunctionBlock_vmType::membership_vmType_Type0(double x) {
	if ( x <= 0.0 )	return 0.0;
	if ( x > 2.0 )	return 0.0;
	if ( x <= 1.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.0 ) / ( 1.0 - 0.0 ) );
	if ( x <= 2.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 1.0 ) / ( 2.0 - 1.0 ) );
}

double FunctionBlock_vmType::membership_vmType_Type1(double x) {
	if ( x <= 1.0 )	return 0.0;
	if ( x > 3.0 )	return 0.0;
	if ( x <= 2.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 1.0 ) / ( 2.0 - 1.0 ) );
	if ( x <= 3.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 2.0 ) / ( 3.0 - 2.0 ) );
}

double FunctionBlock_vmType::membership_vmType_Type2(double x) {
	if ( x <= 2.0 )	return 0.0;
	if ( x > 4.0 )	return 0.0;
	if ( x <= 3.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 2.0 ) / ( 3.0 - 2.0 ) );
	if ( x <= 4.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 3.0 ) / ( 4.0 - 3.0 ) );
}

double FunctionBlock_vmType::membership_vmType_Type3(double x) {
	if ( x <= 3.0 )	return 0.0;
	if ( x > 4.0 )	return 1.0;
	if ( x <= 4.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 3.0 ) / ( 4.0 - 3.0 ) );
}


// Print 
void FunctionBlock_vmType::print() {
	printf("Function block vmType:\n");
	printf("	Input  %20s : %f\n", "bandWidth" , bandWidth);
	printf("	       %20s : %f\n", "bandWidth_High" , bandWidth_High);
	printf("	       %20s : %f\n", "bandWidth_low" , bandWidth_low);
	printf("	       %20s : %f\n", "bandWidth_medium" , bandWidth_medium);
	printf("	Input  %20s : %f\n", "processingPower" , processingPower);
	printf("	       %20s : %f\n", "processingPower_High" , processingPower_High);
	printf("	       %20s : %f\n", "processingPower_low" , processingPower_low);
	printf("	       %20s : %f\n", "processingPower_medium" , processingPower_medium);
	printf("	       %20s : %f\n", "processingPower_veryLow" , processingPower_veryLow);
	printf("	Output %20s : %f\n", "vmType" , vmType);
}

// Reset output
void FunctionBlock_vmType::reset() {
	for( int i=0 ; i < 1000 ; i++ )	{ defuzzify_vmType[i] = 0.0; }
}

int main(int argc, char *argv[]) {
	// Create function blocks
	// Create function blocks
	FunctionBlock_vmType vmType;

		// FunctionBlock_tipper tipper;

	fstream fin;
	fin.open("filename.txt",ios::in);

	fstream fout;
	fout.open("out.txt",ios::out);

	int n;
	fin>>n;
	cout<<n;
	int i,a,b;

	for(i = 0; i < n; i++)
	{
		fin>>a>>b;

		vmType.processingPower = a;
		vmType.bandWidth = b;
		vmType.calc();
		cout<<vmType.vmType<<endl;
		fout<<vmType.vmType<<endl;


	}


	// Parse input
	// if( argc > 1 ) { vmType.bandWidth = atof(argv[1]); }
	// if( argc > 2 ) { vmType.processingPower = atof(argv[2]); }

	// // Calculate
	// vmType.calc();

	// // Show results
	// vmType.print();
	// FunctionBlock_vmType vmType;

	// // Parse input
	// if( argc > 1 ) { vmType.bandWidth = atof(argv[1]); }
	// if( argc > 2 ) { vmType.processingPower = atof(argv[2]); }

	// // Calculate
	// vmType.calc();

	// // Show results
	// vmType.print();
}
